#include <bits/stdc++.h>
using namespace std;

// Recursive Approach with Memoization
bool rec(int ind, int target, vector<int>& arr, vector<vector<int>>& dp) {
    if (target == 0) return true;  // Base Case: If target is 0, subset exists
    if (ind == 0) return arr[0] == target; // Only one element to consider

    if (dp[ind][target] != -1) return dp[ind][target];

    bool notTaken = rec(ind - 1, target, arr, dp);
    bool taken = (arr[ind] <= target) ? rec(ind - 1, target - arr[ind], arr, dp) : false;

    return dp[ind][target] = notTaken || taken;
}

// Tabulation Approach (Bottom-Up DP)
bool tab(int n, int k, vector<int>& arr) {
    vector<vector<bool>> dp(n, vector<bool>(k + 1, false));

    for (int i = 0; i < n; i++) dp[i][0] = true; // If target is 0, always true
    if (arr[0] <= k) dp[0][arr[0]] = true; // Base case for first element

    for (int ind = 1; ind < n; ind++) {
        for (int target = 1; target <= k; target++) {
            bool notTaken = dp[ind - 1][target];
            bool taken = (arr[ind] <= target) ? dp[ind - 1][target - arr[ind]] : false;
            dp[ind][target] = notTaken || taken;
        }
    }

    return dp[n - 1][k];
}

// Space Optimized Approach (Using Two Arrays)
bool so(int n, int k, vector<int>& arr) {
    vector<bool> prev(k + 1, false), curr(k + 1, false);

    prev[0] = curr[0] = true; // If target is 0, always true
    if (arr[0] <= k) prev[arr[0]] = true; // Base case for first element

    for (int ind = 1; ind < n; ind++) {
        for (int target = 1; target <= k; target++) {
            bool notTaken = prev[target];
            bool taken = (arr[ind] <= target) ? prev[target - arr[ind]] : false;
            curr[target] = notTaken || taken;
        }
        prev = curr; // Move current row to previous row for next iteration
    }

    return prev[k];
}

// Fully Space Optimized (Using a Single Array)
bool soo(int n, int k, vector<int>& arr) {
    vector<bool> prev(k + 1, false);
    
    prev[0] = true; // If target is 0, always true
    if (arr[0] <= k) prev[arr[0]] = true; // Base case for first element

    for (int ind = 1; ind < n; ind++) {
        for (int target = k; target >= 0; target--) { // Traverse backward to avoid overwriting data
            if (arr[ind] <= target)
                prev[target] = prev[target] || prev[target - arr[ind]];
        }
    }

    return prev[k];
}

// Function to call all methods and compare results
void solve() {
    int n, k;
    
    // User Input
    cout << "Enter the number of elements in the array: ";
    cin >> n;
    
    vector<int> arr(n);
    cout << "Enter the elements of the array: ";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }
    
    cout << "Enter the target sum: ";
    cin >> k;

    // Recursive Approach with Memoization
    vector<vector<int>> dp(n, vector<int>(k + 1, -1));
    bool recAns = rec(n - 1, k, arr, dp);
    cout << "Recursive (Memoization) Result: " << (recAns ? "Subset found" : "Subset not found") << endl;

    // Tabulation Approach
    cout << "Tabulation Result: " << (tab(n, k, arr) ? "Subset found" : "Subset not found") << endl;

    // Space Optimized Approach (Using Two Arrays)
    cout << "Space Optimized (Two Arrays) Result: " << (so(n, k, arr) ? "Subset found" : "Subset not found") << endl;

    // Fully Space Optimized Approach (Using Single Array)
    cout << "Fully Space Optimized (Single Array) Result: " << (soo(n, k, arr) ? "Subset found" : "Subset not found") << endl;
}

// Main Function
int main() {
    solve();
    return 0;
}

